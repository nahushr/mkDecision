{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Alert","props","elevation","variant","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","useState","errorMessage","serverResponse","state","setState","className","AppBar","position","Toolbar","Typography","TextField","id","label","style","width","multiline","rowsMax","Button","color","onClick","name","document","getElementById","value","message","from_email","to_email","length","validate","payload","axios","post","then","res","data","body","toString","onSend","severity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.41bc2c66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\nfunction validate(from_email, to_email, message, name, setState)\n{\n    if(from_email.length == 0)\n    {\n        setState({\n            errorMessage: \"From  email is Required\",\n            serverResponse: \"\"\n        })\n        return false;\n    }\n    else if(to_email.length == 0)\n    {\n        setState({\n            errorMessage: \"To email is required\",\n            serverResponse: \"\"\n        });\n        return false;\n    }\n    else if(message.length == 0)\n    {\n        setState({\n            errorMessage: \"Message is required\",\n            serverResponse: \"\"\n        });\n        return false;\n    }\n    else if(name.length == 0)\n    {\n        setState({\n            errorMessage: \"Name is required\",\n            serverResponse: \"\"\n        });\n        return false;\n    }\n    return true;\n}\n\nfunction onSend(setState)\n{\n    var name = document.getElementById(\"name\").value;\n    var message = document.getElementById(\"message\").value;\n    var from_email = document.getElementById(\"from_email\").value;\n    var to_email = document.getElementById(\"to_email\").value;\n\n    var result = validate(from_email, to_email, message, name, setState);\n    if(!result) return;\n\n    // axios call to the server\n    var headers = {\n        \"Content-Type\" : \"application/json\"\n    }\n    var payload = {\n          \"name\": name,\n          \"sourceEmail\": from_email,\n          \"destinationEmail\": to_email,\n          \"message\": message\n    }\n    var api_gateway_url = \" https://de4lvq2a46.execute-api.us-east-2.amazonaws.com/v1/post-json\"\n    axios.post(api_gateway_url, payload, headers).\n          then(res => {\n            setState({\n                errorMessage: \"\",\n                serverResponse: res.data.body.toString()\n            });\n      });\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    errorMessage: \"\",\n    serverResponse: \"\"\n  });\n  return (\n    <div className=\"App\">\n        <AppBar position=\"static\">\n                <Toolbar>\n                  <Typography variant=\"h6\" className={classes.title}>\n                    Mk decision messaging application\n                  </Typography>\n                </Toolbar>\n        </AppBar>\n        <br/><br/>\n         <TextField id=\"name\" label=\"Name\" variant=\"outlined\" style={{width:'40%'}}/> <br/><br/><br/>\n         <TextField id=\"from_email\" label=\"From Email\" variant=\"outlined\" style={{width:'40%'}} /> <br/><br/><br/>\n         <TextField id=\"to_email\" label=\"To Email\" variant=\"outlined\" style={{width:'40%'}}/> <br/><br/><br/>\n         <TextField id=\"message\" label=\"Message\" variant=\"outlined\"  multiline rowsMax={4}  style={{width:'40%'}}/> <br/><br/><br/>\n         <Button variant=\"contained\" color=\"primary\" onClick = {() => {onSend(setState);}}> Send Message </Button><br/><br/>\n\n          <Alert severity={state.errorMessage.length > 0 ? \"error\" : \"info\"}>\n          {state.serverResponse.length > 0 ? state.serverResponse : state.errorMessage.length == 0 ? \"Errors and server responses will be displayed here\" : state.errorMessage}\n          </Alert>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}